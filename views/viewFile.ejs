<main class="container my-5 overflow-auto">
    <div class="row justify-content-center my-5">
        <div class="col col-md-8 col-lg-8 col-xl-6">
            <label for="search-input" class="form-label mb-3">Search Table :</label>
            <input type="search" class="form-control  mb-3" id="search-input" placeholder="type to search">
            <div class="btn-div text-center">
                <button class="btn btn-primary" id="search-btn">Search</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col" id="table-container">
            <table class="table table-striped table-hover" id="table">
                <thead>
                    <tr class="table-dark ">
                        <% for ( let header of headers ) { %>
                            <th scope="col">
                                <%=header%>
                            </th><%}%>
                    </tr>
                </thead>
                <tbody id="t-body">
                    <% for ( let rowObj of dataArray ) { %>
                        <tr>
                            <% for ( let item in rowObj ) { %>
                                <td class="">
                                    <%=rowObj[item] %>
                                </td>
                                <%}%>
                        </tr>
                        <%}%>
                </tbody>
            </table>
        </div>
    </div>
    <footer>
        <nav aria-label="Page navigation example">
            <ul class="pagination">
              <li class="page-item  <%=paginationObj.prevClass %>"><a class="page-link" href ="/view-file?fileId=<%=fileId%>&page=<%=pageNo-1%>">Previous</a></li>
              <li class="page-item active"><a class="page-link " href="#"><%=pageNo%></a></li>
              <li class="page-item  <%=paginationObj.nextClass%> "><a class="page-link" href="/view-file?fileId=<%=fileId%>&page=<%=parseInt(pageNo)+1%>">Next</a></li>
            </ul>
          </nav>
    </footer>
</main>
<script>
    const searchInput = document.querySelector("#search-input");
    const searchBtn = document.querySelector("#search-btn") ;
    const tableContainer= document.querySelector("#table-container");
    const table = document.querySelector("#table") ;
    const tBody = document.querySelector("#t-body") ;
    // console.log(tBody)
    // this creates a contant copy of initial table when the page loads
    const arr = Array.from(tBody.children).map((item)=>
    {
        return "<tr>"+item.innerHTML+"</tr>" ;
    }) ;
    // console.log("yoyoyo",arr );
    // to store search results 
    let searchResults=[];

    searchBtn.addEventListener("click", function(event)
    {
        event.preventDefault() ;
        // console.log(tBody.children) ;
        // if the search bar is empty we update the table to its initial state which is the one when the page first loads
        if (searchInput.value == "")
        {
            console.log("inside if'' " );
            document.getElementById("t-body").innerHTML=arr.join(" ").trim() ;
            return ;
        }
        // else call the search fn on table
        searchTable() ;
    } ) ;

    function searchTable ()
    {
        let length = tBody.children.length;
        let searchQuery = searchInput.value ;
        searchResults=[];
        // this is a live HTML Collection ; rows refers to rows of table
        let rows =tBody.children ;
        for (let i=0 ;i<length;i++)
        {
            row=rows[i] ;
             if ( row.innerText.toLowerCase().search(searchQuery.toLowerCase()) > -1  )
             {
                //  console.log("found a match ",row.innerHTML.trim());
                 searchResults.push("<tr>"+row.innerHTML.trim()+"</tr>") ;
                //  console.log(searchResults)
             }
        }
        // update the table with search Results
        document.getElementById("t-body").innerHTML=searchResults.join(" ")
        
    }
    
</script>